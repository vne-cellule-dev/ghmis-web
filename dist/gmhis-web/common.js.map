{"version":3,"sources":["./src/app/_services/act-category.service.ts","./src/app/_services/symptom.service.ts","./src/app/_services/act-code.service.ts","./src/app/_services/pathology.service.ts","./src/app/_services/antecedent.service.ts","./src/app/_services/article-location.service.ts","./src/app/_services/article-supplier.service.ts","./src/app/_services/analysis-request.service.ts","./src/app/_services/facility.service.ts","./src/app/_services/role.service.ts","./src/app/_services/speciality.service.ts","./src/app/_services/patient-prescription.service.ts","./src/app/_services/type-mail.service.ts","./src/app/_services/act-family.service.ts","./src/app/_services/type-cro.service.ts","./src/app/_services/district.service.ts","./src/app/_services/dcu.service.ts","./src/app/_services/type-certificate.service.ts","./src/app/_services/unit-of-measure.service.ts","./src/app/_services/antecedent-family.service.ts","./src/app/_services/type-cro-family.service.ts","./src/app/_services/check-up.service.ts","./src/app/_services/locality.service.ts","./src/app/_services/region.service.ts","./src/app/_services/article-group.service.ts","./src/app/_utility/CustomValidators/int.Validator.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { ActCategory } from '../_models/actCategory.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActCategoryService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(actCategory: ActCategory): Observable<ActCategory> {\n    return this.http.post<ActCategory>(environment.baseUrl2 + '/act-category/add', actCategory);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<ActCategory> {\n    return this.http.put<ActCategory>(environment.baseUrl2 + '/act-category/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<any[]> {\n    return this.http.get<any[]>(environment.baseUrl2 + '/act-category/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<any[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n      //  data['deleted']= (data['deleted'] == null) ? '' : data['deleted'];\n  \n      queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<any[]>(environment.baseUrl2 + '/act-category/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<any[]> {\n  return this.http.get<any[]>(environment.baseUrl2 + '/act-category/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<any> {\n  return this.http.get<any>(environment.baseUrl2 + '/act-category/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/act-category/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/act-category/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/act-category/active_categories_name');\n    }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Symptom } from '../_models/symtom.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SymptomService {\n\n \n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(symptom: Symptom): Observable<Symptom> {\n    return this.http.post<Symptom>(environment.baseUrl2 + '/symptom/add', symptom);\n    \n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<Symptom> {\n    return this.http.put<Symptom>(environment.baseUrl2 + '/symptom/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<any[]> {\n    return this.http.get<any[]>(environment.baseUrl2 + '/symptom/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<any[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<any[]>(environment.baseUrl2 + '/symptom/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<any[]> {\n  return this.http.get<any[]>(environment.baseUrl2 + '/symptom/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<any> {\n  return this.http.get<any>(environment.baseUrl2 + '/symptom/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/symptom/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/symptom/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/symptom/names');\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { ActCode } from '../_models/actCode.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActCodeService {\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(actCode: ActCode): Observable<ActCode> {\n    return this.http.post<ActCode>(environment.baseUrl2 + '/act-code/add', actCode);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<ActCode> {\n    return this.http.put<ActCode>(environment.baseUrl2 + '/act-code/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<any[]> {\n    return this.http.get<any[]>(environment.baseUrl2 + '/act-code/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<any[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n  \n      queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<any[]>(environment.baseUrl2 + '/act-code/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<any[]> {\n  return this.http.get<any[]>(environment.baseUrl2 + '/act-code/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<any> {\n  return this.http.get<any>(environment.baseUrl2 + '/act-code/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/act-code/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/act-code/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/act-code/active_codes_name');\n    }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Pathology } from '../_models/pathology.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PathologyService {\n  \n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(pathology: Pathology): Observable<Pathology> {\n    return this.http.post<Pathology>(environment.baseUrl2 + '/pathology/add', pathology);\n    \n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<Pathology> {\n    return this.http.put<Pathology>(environment.baseUrl2 + '/pathology/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<any[]> {\n    return this.http.get<any[]>(environment.baseUrl2 + '/pathology/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<any[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<any[]>(environment.baseUrl2 + '/pathology/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<any[]> {\n  return this.http.get<any[]>(environment.baseUrl2 + '/pathology/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<any> {\n  return this.http.get<any>(environment.baseUrl2 + '/pathology/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/pathology/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/pathology/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/pathology/active_pathologies_name');\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { Antecedent } from '../_models/antecedent.model';\nimport { catchError } from 'rxjs/operators';\nimport { query } from '@angular/animations';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AntecedentService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(antecedent: Antecedent): Observable<Antecedent> {\n    return this.http.post<Antecedent>(environment.baseUrl2 + '/antecedant-list/add', antecedent);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<Antecedent> {\n    return this.http.put<Antecedent>(environment.baseUrl2 + '/antecedant-list/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<Antecedent[]> {\n    return this.http.get<Antecedent[]>(environment.baseUrl2 + '/antecedant-list/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<Antecedent[]> {\n      let queryParams = {};\n\n       data['active']= (data['active'] == null) ? '' : data['active'];\n       data['antecedantType']= (data['antecedantType'] == null) ? '' : data['antecedantType'];\n\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('antecedantType', data['antecedantType'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<Antecedent[]>(environment.baseUrl2 + '/antecedant-list/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<Antecedent[]> {\n  return this.http.get<Antecedent[]>(environment.baseUrl2 + '/antecedant-list/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<Antecedent> {\n  return this.http.get<Antecedent>(environment.baseUrl2 + '/antecedant-list/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<Antecedent> {\n    return this.http.get<Antecedent>(environment.baseUrl2 + '/antecedant-list/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<Antecedent> {\n    return this.http.get<Antecedent>(environment.baseUrl2 + '/antecedant-list/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/antecedant-list/active_antecedent_lists_name');\n    }\n\n    /**\n   * get a list of object\n   */\n  getIdAndNameByFamily(data): Observable<any> {\n   \n    let queryParams = {};\n    data['historyFamily']= (data['historyFamily'] == null) ? '' : data['historyFamily'];\n\n\n       queryParams = { params: new HttpParams().set('type', data[\"historyFamily\"])\n                                              .set('name', data['history'])\n       };\n\n       return this.http.get<any>(environment.baseUrl2 + '/antecedant-list/by-type', queryParams);\n    \n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ArticleLocation } from '../_models/articleLocation.model';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ArticleLocationService {\r\n\r\n \r\n  constructor(private http: HttpClient) { }\r\n\r\n   /**\r\n   *  POST: add a new object to the database \r\n   */\r\n    save(articleLocation: ArticleLocation): Observable<ArticleLocation> {\r\n      return this.http.post<ArticleLocation>(environment.baseUrl2 + '/article-location/add', articleLocation);\r\n      \r\n    }\r\n\r\n    /** \r\n   * PUT: update the object on the server. Returns the updated objet upon success. \r\n   */\r\n  update(data): Observable<ArticleLocation> {\r\n    return this.http.put<ArticleLocation>(environment.baseUrl2 + '/article-location/update/' + data.id, data);\r\n  }\r\n\r\n  /**\r\n   * get a list of object\r\n   */\r\n   findAll(): Observable<any[]> {\r\n    return this.http.get<any[]>(environment.baseUrl2 + '/article-location/list');\r\n  }\r\n\r\n  findAllByPage(data): Observable<any[]> {\r\n    let queryParams = {};\r\n     data['active']= (data['active'] == null) ? '' : data['active'];\r\n\r\n     queryParams = { params: new HttpParams().set('page', data['page'])\r\n                                            .set('size', data['entries'])\r\n                                            .set('name', data['name'])\r\n                                            .set('active', data['active'])\r\n                                            .set('sort', data['sort']+','+data['order'])\r\n  };\r\n    return this.http.get<any[]>(environment.baseUrl2 + '/article-location/p_list', queryParams);\r\n  }\r\n\r\n   /**\r\n   * get a list of active object\r\n   */\r\n    findActive(): Observable<any[]> {\r\n      return this.http.get<any[]>(environment.baseUrl2 + '/article-location/active_list');\r\n    \r\n      }\r\n    \r\n      /**\r\n       * enable a object\r\n       */\r\n      enable(id) : Observable<any> {\r\n      return this.http.get<any>(environment.baseUrl2 + '/article-location/enable/' + id);\r\n     \r\n      }\r\n    \r\n      /**\r\n       * disable a object\r\n       */\r\n      disable(id) : Observable<any> {\r\n        return this.http.get<any>(environment.baseUrl2 + '/article-location/disable/' + id);\r\n      }\r\n    \r\n      /**\r\n       * get object by id\r\n       * @param id \r\n       */\r\n      findById(id: number): Observable<any> {\r\n        return this.http.get<any>(environment.baseUrl2 + '/article-location/detail/' + id);\r\n      }\r\n    \r\n      /**\r\n       * get a list of object\r\n       */\r\n      getIdAndName(): Observable<any> {\r\n          return this.http.get<any>(environment.baseUrl2 + '/article-location/active_locations_name');\r\n        }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { environment } from 'src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { ArticleSupplier } from '../_models/articleSupplier.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ArticleSupplierService {\r\n\r\n  constructor( private http: HttpClient) { }\r\n\r\n  /**\r\n   *  POST: add a new object to the database \r\n   */\r\n  save(articlesupplier: ArticleSupplier): Observable<ArticleSupplier> {\r\n    return this.http.post<ArticleSupplier>(environment.baseUrl2 + '/article-supplier/add', articlesupplier);\r\n  }\r\n\r\n  /** \r\n   * PUT: update the object on the server. Returns the updated objet upon success. \r\n   */\r\n  update(data): Observable<ArticleSupplier> {\r\n    return this.http.put<ArticleSupplier>(environment.baseUrl2 + '/article-supplier/update/' + data.id, data);\r\n  }\r\n\r\n  /**\r\n   * get a list of object\r\n   */\r\n  findAll(): Observable<ArticleSupplier[]> {\r\n    return this.http.get<ArticleSupplier[]>(environment.baseUrl2 + '/article-supplier/list');\r\n  }\r\n\r\n    /**\r\n   * get a paginated list of object\r\n   */\r\n  findAllByPage(data): Observable<ArticleSupplier[]> {\r\n      let queryParams = {};\r\n       data['active']= (data['active'] == null) ? '' : data['active'];\r\n        data['country']= (data['country'] == null) ? '' : data['country'];\r\n      //  data['deleted']= (data['deleted'] == null) ? '' : data['deleted'];\r\n  \r\n      queryParams = { params: new HttpParams().set('page', data['page'])\r\n                                              .set('size', data['entries'])\r\n                                              .set('name', data['name'])\r\n                                              .set('contact', data['contact'])\r\n                                              .set('country', data['country'])\r\n                                              .set('active', data['active'])\r\n                                              .set('sort', data['sort']+','+data['order'])\r\n    };\r\n      return this.http.get<ArticleSupplier[]>(environment.baseUrl2 + '/article-supplier/p_list', queryParams);\r\n    }\r\n    \r\n  /**\r\n   * get a list of active object\r\n   */\r\n  findActive(): Observable<ArticleSupplier[]> {\r\n  return this.http.get<ArticleSupplier[]>(environment.baseUrl2 + '/article-supplier/active_list');\r\n\r\n  }\r\n\r\n  /**\r\n   * enable a object\r\n   */\r\n  enable(id) : Observable<ArticleSupplier> {\r\n  return this.http.get<ArticleSupplier>(environment.baseUrl2 + '/article-supplier/enable/' + id);\r\n \r\n  }\r\n\r\n  /**\r\n   * disable a object\r\n   */\r\n  disable(id) : Observable<ArticleSupplier> {\r\n    return this.http.get<ArticleSupplier>(environment.baseUrl2 + '/article-supplier/disable/' + id);\r\n  }\r\n\r\n  /**\r\n   * get object by id\r\n   * @param id \r\n   */\r\n  findById(id: number): Observable<ArticleSupplier> {\r\n    return this.http.get<ArticleSupplier>(environment.baseUrl2 + '/article-supplier/detail/' + id);\r\n  }\r\n\r\n  /**\r\n   * get a list of object\r\n   */\r\n  getIdAndName(): Observable<any> {\r\n      return this.http.get<any>(environment.baseUrl2 + '/article-supplier/active_suppliers_name');\r\n    }\r\n\r\n\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport jsPDF from 'jspdf';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { AnalysisRequest } from '../_models/analysisRequest.model';\nimport { dateOutputFormat } from '../_utility/date/date-output-format';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalysisRequestService {\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(analysisRequest: AnalysisRequest): Observable<AnalysisRequest> {\n    return this.http.post<AnalysisRequest>(environment.baseUrl2 + '/analysis-request/add', analysisRequest);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<AnalysisRequest> {\n    return this.http.put<AnalysisRequest>(environment.baseUrl2 + '/analysis-request/update/' + data.id, data);\n  }\n\n  /**\n   * get a paginated list of object\n   */\n  findAllByPatientAndPage(data): Observable<AnalysisRequest[]> {\n    let queryParams = {};\n\n    queryParams = {\n      params: new HttpParams().set('patientId', data['patientId'])\n        .set('page', data['page'])\n        .set('size', data['size'])\n        .set('sort', data['sort'] + ',' + data['order'])\n    };\n\n    return this.http.get<AnalysisRequest[]>(environment.baseUrl2 + '/analysis-request/p_list', queryParams);\n  }\n\n  /**\n   * get a paginated list of object\n   */\n  findAllPage(data): Observable<AnalysisRequest[]> {\n    let queryParams = {};\n\n    queryParams = {\n      params: new HttpParams().set('page', data['page'])\n        .set('size', data['entries'])\n        .set('cnamNumber', data['cnamNumber'])\n        .set('idCardNumber', data['idCardNumber'])\n        .set('firstName', data['firstName'])\n        .set('lastName', data['lastName'])\n        .set('patientExternalId', data['patientExternalId'])\n        .set('cellPhone', data['cellPhone'])\n        .set('state', data['state'])\n        .set('sort', data['sort'] + ',' + data['order'])\n    };\n\n    return this.http.get<AnalysisRequest[]>(environment.baseUrl2 + '/analysis-request/all_page', queryParams);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<AnalysisRequest> {\n    return this.http.get<AnalysisRequest>(environment.baseUrl2 + '/analysis-request/detail/' + id);\n  };\n\n  /** \n  * performed analysis. Returns the updated objet upon success. \n  */\n  setPerformed(id): Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/analysis-request/performed/' + id);\n  }\n\n  /**\n   * generate analysis request document\n   */\n  generatePdf(analysisRequest: object, room: string, patientTag: any) {\n    var doc = new jsPDF('p', 'pt', 'a5');\n\n    if (analysisRequest) {\n\n      // doc variable\n      var date = dateOutputFormat(analysisRequest['date']);\n      var patientFullName = analysisRequest['patientFirstName'] + ' ' + analysisRequest['patientMaidenName'] + ' ' + analysisRequest['patientLastName'];\n      var patientNumber = analysisRequest['patientExternalId'];\n      var birthDate = dateOutputFormat(analysisRequest[\"patientBirthDate\"]);\n      var cellPhone = analysisRequest['patientCellPhone1'] + ' ' + analysisRequest['patientCellPhone2'];\n      var practicianFullName = analysisRequest['practicianFirstName'] + ' ' + analysisRequest['practicianLastName'];\n      var analysis = analysisRequest['analysis'].split(',');\n      var footer = environment.documentFooter;\n      var performededAt = dateOutputFormat(analysisRequest['performedAt']);\n      var performedByFullName = analysisRequest['performedByFirstName'] + ' ' + analysisRequest['performedByLastName'];\n\n\n      //doc head\n      doc.addImage(environment.logo, \"JPEG\", 25, 15, 60, 60);\n      doc.setFontSize(10);\n      doc.setFont(\"bold\");\n      doc.text(\"Laboratoire d'analyses médicales 24h/24\", 230, 30);\n      doc.addImage(patientTag['src'], 'JPEG', 230, 30, 150, 50);\n\n      //information\n      doc.setFontSize(10);\n      doc.text(patientNumber, 260, 80);\n      doc.text(\"Date:\" + date, 15, 120)\n      doc.text(\"Chambre: \" + room, 250, 120);\n      doc.text(\"Date de naissance: \" + birthDate, 15, 140);\n      doc.text(\"Télephone: \" + cellPhone, 250, 140);\n      doc.text(\"Prélèvement effectué par: \" + performedByFullName, 15, 160);\n      doc.text(\"Prélèvement effectué à : \" + performededAt, 250, 160);\n      doc.text(\"patient: \" + patientFullName, 15, 180);\n      doc.text(\"Médécin: \" + practicianFullName, 15, 200);\n      doc.setFontSize(12);\n      doc.text(\"Analyses: \", 150, 220);\n      doc.setLineWidth(1)\n      doc.line(200, 222, 150, 222)\n\n      doc.setFontSize(10);\n      var splitAnalysis = doc.splitTextToSize(analysis.join(\", \") + ', ' + analysisRequest['otherAnalysis'], 360);\n      doc.text(\"- \" + splitAnalysis, 15, 250);\n      doc.setTextColor(150)\n      doc.setFontSize(8);\n      doc.setLineWidth(0.25)\n      doc.line(390, 530, 25, 530)\n      var splitFooter = doc.splitTextToSize(footer, 360);\n      doc.text(splitFooter, 25, 540);\n\n    }\n\n    return doc;\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Facility } from '../_models/facility.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FacilityService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(facility: Facility): Observable<Facility> {\n    return this.http.post<Facility>(environment.baseUrl2 + '/facility/add', facility);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<Facility> {\n    return this.http.put<Facility>(environment.baseUrl2 + '/facility/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<Facility[]> {\n    return this.http.get<Facility[]>(environment.baseUrl2 + '/facility/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<Facility[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<Facility[]>(environment.baseUrl2 + '/facility/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<Facility[]> {\n  return this.http.get<Facility[]>(environment.baseUrl2 + '/facility/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<Facility> {\n  return this.http.get<Facility>(environment.baseUrl2 + '/facility/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<Facility> {\n    return this.http.get<Facility>(environment.baseUrl2 + '/facility/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<Facility> {\n    return this.http.get<Facility>(environment.baseUrl2 + '/facility/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/facility/active_facilities_name');\n    }\n  }\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Role } from '../_models/role.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(role: Role): Observable<Role> {\n    return this.http.post<Role>(environment.baseUrl2 + '/role/add', role);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<Role> {\n    return this.http.put<Role>(environment.baseUrl2 + '/role/update/' + data.roleDTO.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<Role[]> {\n    return this.http.get<Role[]>(environment.baseUrl2 + '/role/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<Role[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n      //  data['deleted']= (data['deleted'] == null) ? '' : data['deleted'];\n  \n      queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<Role[]>(environment.baseUrl2 + '/role/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<Role[]> {\n  return this.http.get<Role[]>(environment.baseUrl2 + '/role/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<Role> {\n  return this.http.get<Role>(environment.baseUrl2 + '/role/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<Role> {\n    return this.http.get<Role>(environment.baseUrl2 + '/role/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<Role> {\n    return this.http.get<Role>(environment.baseUrl2 + '/role/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/role/active_roles_name');\n    }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Speciality } from '../_models/speciality.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpecialityService {\n\n  constructor( private http: HttpClient) { }\n\n   \n  /**\n   *  POST: add a new object to the database \n   */\n  save(speciality: Speciality): Observable<Speciality> {\n    return this.http.post<Speciality>(environment.baseUrl2 + '/speciality/add', speciality);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<Speciality> {\n    return this.http.put<Speciality>(environment.baseUrl2 + '/speciality/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<Speciality[]> {\n    return this.http.get<Speciality[]>(environment.baseUrl2 + '/speciality/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<Speciality[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n      //  data['deleted']= (data['deleted'] == null) ? '' : data['deleted'];\n  \n      queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<Speciality[]>(environment.baseUrl2 + '/speciality/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<Speciality[]> {\n  return this.http.get<Speciality[]>(environment.baseUrl2 + '/speciality/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<Speciality> {\n  return this.http.get<Speciality>(environment.baseUrl2 + '/speciality/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<Speciality> {\n    return this.http.get<Speciality>(environment.baseUrl2 + '/speciality/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<Speciality> {\n    return this.http.get<Speciality>(environment.baseUrl2 + '/speciality/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/speciality/active_specialities_name');\n    }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport jsPDF from 'jspdf';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { PatientPrescription } from '../_models/patientPrescription.model';\nimport { dateOutputFormat } from '../_utility/date/date-output-format';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientPrescriptionService {\n\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(prescription: PatientPrescription): Observable<PatientPrescription> {\n    return this.http.post<PatientPrescription>(environment.baseUrl2 + '/patient-prescription/add', prescription);\n  }\n\n   /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n    update(data): Observable<PatientPrescription> {\n      return this.http.put<PatientPrescription>(environment.baseUrl2 + '/patient-prescription/update/' + data.id, data);\n    }\n\n  /**\n * get a paginated list of object\n */\n  findAllByPatientAndPage(data): Observable<any[]> {\n    let queryParams = {};\n\n    queryParams = {\n      params: new HttpParams().set('patientId', data['patientId'])\n        .set('page', data['page'])\n    };\n\n    return this.http.get<PatientPrescription[]>(environment.baseUrl2 + '/patient-prescription/p_list', queryParams);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<PatientPrescription> {\n    return this.http.get<PatientPrescription>(environment.baseUrl2 + '/patient-prescription/detail/' + id);\n  }\n\n  /**\n * get a paginated list of object\n */\n  findAllPage(data): Observable<any[]> {\n    let queryParams = {};\n\n    queryParams = {\n      params: new HttpParams().set('page', data['page'])\n        .set('size', data['entries'])\n        .set('cnamNumber', data['cnamNumber'])\n        .set('idCardNumber', data['idCardNumber'])\n        .set('firstName', data['firstName'])\n        .set('lastName', data['lastName'])\n        .set('patientExternalId', data['patientExternalId'])\n        .set('cellPhone', data['cellPhone'])\n        .set('state', data['state'])\n        .set('sort', data['sort'] + ',' + data['order'])\n    };\n\n    return this.http.get<any[]>(environment.baseUrl2 + '/patient-prescription/all_page', queryParams);\n  }\n\n  /**\n   * \n   */\n  servePrescription(prescription): Observable<any> {\n    return this.http.put<any>(environment.baseUrl2 + '/prescription/update/' + prescription.id, prescription);\n  }\n\n  /**\n   * generate prescription document\n   */\n  generatePdf(prescription: object, patientTag: any) {\n\n    var doc = new jsPDF('p', 'pt', 'a5');\n    var patient = prescription['patient'];\n    var practician = prescription['practician'];\n    var drugs = JSON.parse(prescription['drugs']);\n\n\n    if (prescription) {\n\n      // doc variable\n      var date = dateOutputFormat(prescription['date']);\n      var patientFullName = patient['firstName'] + ' ' + patient['maidenName'] + ' ' + patient['lastName'];\n      var patientNumber = patient['patientExternalId'];\n      var cellPhone = patient['cellPhone1'] + ' ' + patient['cellPhone2'];\n      var practicianFullName = practician['firstName'] + ' ' + practician['lastName'];\n      var footer = environment.documentFooter;\n\n      //doc head\n      doc.addImage(environment.logo, \"JPEG\", 25, 15, 60, 60);\n      doc.setFontSize(10);\n      doc.setFont(\"bold\");\n      doc.addImage(patientTag['src'], 'JPEG', 230, 30, 170, 50);\n\n      //information\n      doc.setFontSize(10);\n      doc.text(patientNumber, 260, 80);\n      doc.text(\"Date:\" + date, 15, 120)\n\n      doc.text(\"patient: \" + patientFullName, 15, 140);\n      doc.text(\"Télephone: \" + cellPhone, 15, 160);\n      // doc.text(\"Médécin: \" + practicianFullName, 15, 160);\n      doc.setFontSize(12);\n      doc.setFont('times', 'bold')\n      doc.text(\"Ordonance médical: \", 150, 190);\n      doc.setLineWidth(1)\n      doc.line(250, 192, 150, 192)\n      doc.setFontSize(10);\n\n      for (let index = 0; index < drugs.length; index++) {\n\n        const element = drugs[index];\n\n        var drug = element['drug'];\n        var qty = element['qty'];\n        var duration = element['duration'];\n        var dosage = element['dosage'];\n\n        if (qty) drug = drug + ' - ' + qty;\n        if (duration) drug = drug + ' - ' + duration;\n        doc.setFont('times', 'bold')\n        doc.text(\"- \" + drug, 15, 220 + index * 35);\n        doc.setFont('times', 'italic')\n        if (dosage) doc.text(dosage, 15, 235 + index * 35);\n      }\n\n      doc.setFont('times', 'bold')\n      doc.text(\"Médécin: \", 200, 220 + drugs.length * 35);\n      doc.text(practicianFullName, 200, 230 + drugs.length * 35);\n      doc.setTextColor(150)\n      doc.setFontSize(8);\n      doc.setLineWidth(0.25)\n      doc.line(390, 530, 25, 530)\n      var splitFooter = doc.splitTextToSize(footer, 360);\n      doc.text(splitFooter, 25, 540);\n      doc.setTextColor(0, 0, 0)\n      doc.text(\" Arrêté la présente facture à la somme de : \" + 1200, 25, 730);\n\n    }\n\n    return doc;\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { TypeMail } from '../_models/typeMail.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypeMailService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(typeMail: TypeMail): Observable<TypeMail> {\n    return this.http.post<TypeMail>(environment.baseUrl2 + '/courier-type/add', typeMail);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<TypeMail> {\n    return this.http.put<TypeMail>(environment.baseUrl2 + '/courier-type/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<TypeMail[]> {\n    return this.http.get<TypeMail[]>(environment.baseUrl2 + '/courier-type/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<TypeMail[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<TypeMail[]>(environment.baseUrl2 + '/courier-type/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<TypeMail[]> {\n  return this.http.get<TypeMail[]>(environment.baseUrl2 + '/courier-type/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<TypeMail> {\n  return this.http.get<TypeMail>(environment.baseUrl2 + '/courier-type/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<TypeMail> {\n    return this.http.get<TypeMail>(environment.baseUrl2 + '/courier-type/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<TypeMail> {\n    return this.http.get<TypeMail>(environment.baseUrl2 + '/courier-type/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/courier-type/active_names');\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { ActFamily } from '../_models/actFamily.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActFamilyService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(actFamily: ActFamily): Observable<ActFamily> {\n    return this.http.post<ActFamily>(environment.baseUrl2 + '/act-group/add', actFamily);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<ActFamily> {\n    return this.http.put<ActFamily>(environment.baseUrl2 + '/act-group/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<any[]> {\n    return this.http.get<any[]>(environment.baseUrl2 + '/act-group/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<any[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n      //  data['deleted']= (data['deleted'] == null) ? '' : data['deleted'];\n  \n      queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<any[]>(environment.baseUrl2 + '/act-group/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<any[]> {\n  return this.http.get<any[]>(environment.baseUrl2 + '/act-group/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<any> {\n  return this.http.get<any>(environment.baseUrl2 + '/act-group/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/act-group/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<any> {\n    return this.http.get<any>(environment.baseUrl2 + '/act-group/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/act-group/active_groups_name');\n    }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { TypeCro } from '../_models/typeCro.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypeCroService {\n\n  \n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(typeCro: TypeCro): Observable<TypeCro> {\n    return this.http.post<TypeCro>(environment.baseUrl2 + '/cro-type/add', typeCro);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<TypeCro> {\n    return this.http.put<TypeCro>(environment.baseUrl2 + '/cro-type/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<TypeCro[]> {\n    return this.http.get<TypeCro[]>(environment.baseUrl2 + '/cro-type/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<TypeCro[]> {\n      let queryParams = {};\n\n       data['active']= (data['active'] == null) ? '' : data['active'];\n       data['croGroup']= (data['croGroup'] == null) ? '' : data['croGroup'];\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('croGroup', data['croGroup'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<TypeCro[]>(environment.baseUrl2 + '/cro-type/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<TypeCro[]> {\n  return this.http.get<TypeCro[]>(environment.baseUrl2 + '/cro-type/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<TypeCro> {\n  return this.http.get<TypeCro>(environment.baseUrl2 + '/cro-type/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<TypeCro> {\n    return this.http.get<TypeCro>(environment.baseUrl2 + '/cro-type/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<TypeCro> {\n    return this.http.get<TypeCro>(environment.baseUrl2 + '/cro-type/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/cro-type/active_names');\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DistrictService {\n\n  constructor(private http: HttpClient) { }\n\n  /**\n  * get a list of id and name of objects\n  */\n  findByRegion(id: number) {\n    return this.http.get<any>(environment.baseUrl2 + '/region/districts_name/{id}' + id);\n  }\n\n  /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<any[]> {\n\n    let queryParams = {};\n\n    queryParams = {\n      params: new HttpParams().set('page', data['page'])\n        .set('size', data['entries'])\n        .set('name', data['name'])\n        .set('sort', data['sort'] + ',' + data['order'])\n    };\n    return this.http.get<any[]>(environment.baseUrl2 + '/region/p_districts/' + data['region'], queryParams);\n  }\n\n  /**\n  * get a list of active object\n  */\n  getIdAndName(): Observable<any[]> {\n    return this.http.get<any[]>(environment.baseUrl2 + '/district/names');\n  }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Dcu } from '../_models/dcu.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DcuService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(dcu: Dcu): Observable<Dcu> {\n    return this.http.post<Dcu>(environment.baseUrl2 + '/dcu/add', dcu);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<Dcu> {\n    return this.http.put<Dcu>(environment.baseUrl2 + '/dcu/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<Dcu[]> {\n    return this.http.get<Dcu[]>(environment.baseUrl2 + '/dcu/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<Dcu[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n  \n      queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<Dcu[]>(environment.baseUrl2 + '/dcu/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<Dcu[]> {\n  return this.http.get<Dcu[]>(environment.baseUrl2 + '/dcu/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<Dcu> {\n  return this.http.get<Dcu>(environment.baseUrl2 + '/dcu/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<Dcu> {\n    return this.http.get<Dcu>(environment.baseUrl2 + '/dcu/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<Dcu> {\n    return this.http.get<Dcu>(environment.baseUrl2 + '/dcu/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/dcu/active_name');\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { TypeCertificate } from '../_models/typeCertificate.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypeCertificateService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(typeCertificate: TypeCertificate): Observable<TypeCertificate> {\n    return this.http.post<TypeCertificate>(environment.baseUrl2 + '/certificat-type/add', typeCertificate);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<TypeCertificate> {\n    return this.http.put<TypeCertificate>(environment.baseUrl2 + '/certificat-type/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<TypeCertificate[]> {\n    return this.http.get<TypeCertificate[]>(environment.baseUrl2 + '/certificat-type/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<TypeCertificate[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<TypeCertificate[]>(environment.baseUrl2 + '/certificat-type/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<TypeCertificate[]> {\n  return this.http.get<TypeCertificate[]>(environment.baseUrl2 + '/certificat-type/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<TypeCertificate> {\n  return this.http.get<TypeCertificate>(environment.baseUrl2 + '/certificat-type/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<TypeCertificate> {\n    return this.http.get<TypeCertificate>(environment.baseUrl2 + '/certificat-type/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<TypeCertificate> {\n    return this.http.get<TypeCertificate>(environment.baseUrl2 + '/certificat-type/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/certificat-type/active_names');\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Uom } from '../_models/unitOfMeasure.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UnitOfMeasureService {\n\n  constructor( private http: HttpClient) { }\n   \n  /**\n   *  POST: add a new object to the database \n   */\n  save(uom: Uom): Observable<Uom> {\n    return this.http.post<Uom>(environment.baseUrl2 + '/uom/add', uom);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<Uom> {\n    return this.http.put<Uom>(environment.baseUrl2 + '/uom/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<Uom[]> {\n    return this.http.get<Uom[]>(environment.baseUrl2 + '/uom/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<Uom[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n  \n      queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<Uom[]>(environment.baseUrl2 + '/uom/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<Uom[]> {\n  return this.http.get<Uom[]>(environment.baseUrl2 + '/uom/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<Uom> {\n  return this.http.get<Uom>(environment.baseUrl2 + '/uom/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<Uom> {\n    return this.http.get<Uom>(environment.baseUrl2 + '/uom/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<Uom> {\n    return this.http.get<Uom>(environment.baseUrl2 + '/uom/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/uom/names');\n    }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { AntecedentFamily } from '../_models/antecedentFamily';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AntecedentFamilyService {\n\n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(antecedentFamily: AntecedentFamily): Observable<AntecedentFamily> {\n    return this.http.post<AntecedentFamily>(environment.baseUrl2 + '/antecedant-type/add', antecedentFamily);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<AntecedentFamily> {\n    return this.http.put<AntecedentFamily>(environment.baseUrl2 + '/antecedant-type/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<AntecedentFamily[]> {\n    return this.http.get<AntecedentFamily[]>(environment.baseUrl2 + '/antecedant-type/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<AntecedentFamily[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<AntecedentFamily[]>(environment.baseUrl2 + '/antecedant-type/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<AntecedentFamily[]> {\n  return this.http.get<AntecedentFamily[]>(environment.baseUrl2 + '/antecedant-type/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<AntecedentFamily> {\n  return this.http.get<AntecedentFamily>(environment.baseUrl2 + '/antecedant-type/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<AntecedentFamily> {\n    return this.http.get<AntecedentFamily>(environment.baseUrl2 + '/antecedant-type/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<AntecedentFamily> {\n    return this.http.get<AntecedentFamily>(environment.baseUrl2 + '/antecedant-type/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/antecedant-type/active_antecedant_types_name');\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { TypeCroFamily } from '../_models/typeCroFamily.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypeCroFamilyService {\n  \n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(typeCroFamily: TypeCroFamily): Observable<TypeCroFamily> {\n    return this.http.post<TypeCroFamily>(environment.baseUrl2 + '/cro-group/add', typeCroFamily);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<TypeCroFamily> {\n    return this.http.put<TypeCroFamily>(environment.baseUrl2 + '/cro-group/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<TypeCroFamily[]> {\n    return this.http.get<TypeCroFamily[]>(environment.baseUrl2 + '/cro-group/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<TypeCroFamily[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n\n       queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<TypeCroFamily[]>(environment.baseUrl2 + '/cro-group/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<TypeCroFamily[]> {\n  return this.http.get<TypeCroFamily[]>(environment.baseUrl2 + '/cro-group/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<TypeCroFamily> {\n  return this.http.get<TypeCroFamily>(environment.baseUrl2 + '/cro-group/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<TypeCroFamily> {\n    return this.http.get<TypeCroFamily>(environment.baseUrl2 + '/cro-group/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<TypeCroFamily> {\n    return this.http.get<TypeCroFamily>(environment.baseUrl2 + '/cro-group/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/cro-group/active_names');\n    }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport jsPDF from 'jspdf';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { CheckUp } from '../_models/checkUp.model';\nimport { dateOutputFormat } from '../_utility/date/date-output-format';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckUpService {\n  \n  constructor( private http: HttpClient) { }\n\n  /**\n   *  POST: add a new object to the database \n   */\n  save(checkUp: CheckUp): Observable<CheckUp> {\n    return this.http.post<CheckUp>(environment.baseUrl2 + '/check-up/add', checkUp);\n  }\n\n  /** \n   * PUT: update the object on the server. Returns the updated objet upon success. \n   */\n  update(data): Observable<CheckUp> {\n    return this.http.put<CheckUp>(environment.baseUrl2 + '/check-up/update/' + data.id, data);\n  }\n\n  /**\n   * get a list of object\n   */\n  findAll(): Observable<CheckUp[]> {\n    return this.http.get<CheckUp[]>(environment.baseUrl2 + '/check-up/list');\n  }\n\n    /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<CheckUp[]> {\n      let queryParams = {};\n       data['active']= (data['active'] == null) ? '' : data['active'];\n  \n      queryParams = { params: new HttpParams().set('page', data['page'])\n                                              .set('size', data['entries'])\n                                              .set('name', data['name'])\n                                              .set('active', data['active'])\n                                              .set('sort', data['sort']+','+data['order'])\n    };\n      return this.http.get<CheckUp[]>(environment.baseUrl2 + '/check-up/p_list', queryParams);\n    }\n    \n  /**\n   * get a list of active object\n   */\n  findActive(): Observable<CheckUp[]> {\n  return this.http.get<CheckUp[]>(environment.baseUrl2 + '/check-up/active_list');\n\n  }\n\n  /**\n   * enable a object\n   */\n  enable(id) : Observable<CheckUp> {\n  return this.http.get<CheckUp>(environment.baseUrl2 + '/check-up/enable/' + id);\n \n  }\n\n  /**\n   * disable a object\n   */\n  disable(id) : Observable<CheckUp> {\n    return this.http.get<CheckUp>(environment.baseUrl2 + '/check-up/disable/' + id);\n  }\n\n  /**\n   * get object by id\n   * @param id \n   */\n  findById(id: number): Observable<CheckUp> {\n    return this.http.get<CheckUp>(environment.baseUrl2 + '/check-up/detail/' + id);\n  }\n\n  /**\n   * get a list of object\n   */\n  getIdAndName(): Observable<any> {\n      return this.http.get<any>(environment.baseUrl2 + '/check-up/active_name');\n    }\n\n /**\n   * generate analysis request document\n   */\n  generatePdf(checkUp : object,  patientTag : any) {\n    var doc = new jsPDF('p', 'pt', 'a5');\n    var patient = checkUp['patient'];\n    var practician = checkUp['practician'];\n    var pc = checkUp['checkUp'];\n      \n          if(checkUp){\n  \n           // doc variable\n            var date = dateOutputFormat(checkUp['date']);\n            var patientFullName =  patient['firstName'] +' ' + patient['maidenName'] +' '+ patient['lastName'];\n            var patientNumber = patient['patientExternalId'];\n            var birthDate = dateOutputFormat(patient[\"birthDate\"]);\n            var cellPhone = patient['cellPhone1'] +' - ' + patient['cellPhone2'];\n            var practicianFullName = practician['firstName'] + ' ' + practician['lastName'];\n            var footer = environment.documentFooter; \n        \n          //     //doc head\n            doc.addImage(environment.logo, \"JPEG\", 25, 15, 60, 60);\n            doc.setFontSize(10);\n            doc.setFont(\"bold\");\n            doc.addImage(patientTag['src'], 'JPEG', 230 , 30, 170, 50);\n  \n            //information\n            doc.setFontSize(10);\n            doc.text(patientNumber, 260, 80);\n            doc.text(\"Date:\" + date, 15, 120)\n            doc.text(\"patient: \"+ patientFullName, 15,140);\n            doc.text(\"Télephone: \"+ cellPhone, 15,160);\n            doc.text(\"Médécin: \" + practicianFullName, 15, 180);\n            doc.setFontSize(12);\n            doc.setFont(\"bold\");\n            doc.text( pc['name'] + \": \", 150, 220);\n        \n            doc.setFontSize(10);\n            for (let index = 0; index < pc[\"acts\"].length; index++) {\n              doc.text(\"- \" + pc['acts'][index]['name'], 15, 250 + index * 20);\n            }\n        \n            doc.setTextColor(150)\n            doc.setFontSize(8);\n            doc.setLineWidth(0.25)\n            doc.line(390, 530, 25, 530)\n            var splitFooter = doc.splitTextToSize(footer, 360);\n            doc.text(splitFooter, 25, 540);\n            \n          }\n    \n        return doc;  \n  }    \n    \n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalityService {\n\n  \n  constructor( private http: HttpClient) { }\n\n  /**\n   * get a list  of objects\n   */\n  findByDistrict(id: number){\n    return this.http.get<any>(environment.baseUrl2 + '/district/localities_name/{id}' + id);\n  }\n\n   /**\n   * get a list  of objects\n   */\n  findByCity(id: number){\n    return this.http.get<any>(environment.baseUrl2 + '/city/localities_name/' + id);\n  }\n\n  /**\n   * get a paginated list of object\n   */\n  findAllPage(data): Observable<any[]> {\n\n    let queryParams = {};\n\n    data['district']= (data['district'] == null) ? '' : data['district'];\n    data['city']= (data['city'] == null) ? '' : data['city'];\n\n    queryParams = { params: new HttpParams().set('page', data['page'])\n                                            .set('size', data['entries'])\n                                            .set('name', data['name'])\n                                            .set('district', data['district'])\n                                            .set('city', data['city'])\n                                            .set('sort', data['sort']+','+data['order'])\n  };\n    return this.http.get<any[]>(environment.baseUrl2 + '/locality/p_all/', queryParams);\n  }\n\n  /**\n   * get a paginated list of object\n   */\n  findAllPageByCity(data): Observable<any[]> {\n\n    let queryParams = {};\n\n    queryParams = { params: new HttpParams().set('page', data['page'])\n                                            .set('size', data['entries'])\n                                            .set('name', data['name'])\n                                            .set('sort', data['sort']+','+data['order'])\n  };\n    return this.http.get<any[]>(environment.baseUrl2 + '/city/p_localities/'+ data['city'], queryParams);\n  }\n\n  /**\n   * get a paginated list of object\n   */\n  findAllPageByDistrict(data): Observable<any[]> {\n\n    let queryParams = {};\n\n    queryParams = { params: new HttpParams().set('page', data['page'])\n                                            .set('size', data['entries'])\n                                            .set('name', data['name'])\n                                            .set('sort', data['sort']+','+data['order'])\n  };\n    return this.http.get<any[]>(environment.baseUrl2 + '/district/p_districts/'+ data['district'], queryParams);\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegionService {\n\n  constructor(private http: HttpClient) { }\n\n /**\n   * get a list of id and name of objects\n   */\n  findByCountry(id: number){\n    return this.http.get<any>(environment.baseUrl2 + '/country/regions_name/{id}' + id);\n  }\n\n  /**\n   * get a paginated list of object\n   */\n  findAllByPage(data): Observable<any[]> {\n\n    let queryParams = {};\n\n    queryParams = { params: new HttpParams().set('page', data['page'])\n                                            .set('size', data['entries'])\n                                            .set('name', data['name'])\n                                            .set('sort', data['sort']+','+data['order'])\n  };\n    return this.http.get<any[]>(environment.baseUrl2 + '/country/p_regions/'+ data['country'], queryParams);\n  }\n\n   /**\n   * get a list of active object\n   */\n  getIdAndName(): Observable<any[]> {\n    return this.http.get<any[]>(environment.baseUrl2 + '/region/names');\n  }\n\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ArticleGroup } from '../_models/articleGroup.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ArticleGroupService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n   /**\r\n   *  POST: add a new object to the database \r\n   */\r\n    save(articleGroup: ArticleGroup): Observable<ArticleGroup> {\r\n      return this.http.post<ArticleGroup>(environment.baseUrl2 + '/article-group/add', articleGroup);\r\n      \r\n    }\r\n\r\n    /** \r\n   * PUT: update the object on the server. Returns the updated objet upon success. \r\n   */\r\n  update(data): Observable<ArticleGroup> {\r\n    return this.http.put<ArticleGroup>(environment.baseUrl2 + '/article-group/update/' + data.id, data);\r\n  }\r\n\r\n  /**\r\n   * get a list of object\r\n   */\r\n   findAll(): Observable<any[]> {\r\n    return this.http.get<any[]>(environment.baseUrl2 + '/article-group/list');\r\n  }\r\n\r\n  findAllByPage(data): Observable<any[]> {\r\n    let queryParams = {};\r\n     data['active']= (data['active'] == null) ? '' : data['active'];\r\n\r\n     queryParams = { params: new HttpParams().set('page', data['page'])\r\n                                            .set('size', data['entries'])\r\n                                            .set('name', data['name'])\r\n                                            .set('active', data['active'])\r\n                                            .set('sort', data['sort']+','+data['order'])\r\n  };\r\n    return this.http.get<any[]>(environment.baseUrl2 + '/article-group/p_list', queryParams);\r\n  }\r\n\r\n   /**\r\n   * get a list of active object\r\n   */\r\n    findActive(): Observable<any[]> {\r\n      return this.http.get<any[]>(environment.baseUrl2 + '/article-group/active_list');\r\n    \r\n      }\r\n    \r\n      /**\r\n       * enable a object\r\n       */\r\n      enable(id) : Observable<any> {\r\n      return this.http.get<any>(environment.baseUrl2 + '/article-group/enable/' + id);\r\n     \r\n      }\r\n    \r\n      /**\r\n       * disable a object\r\n       */\r\n      disable(id) : Observable<any> {\r\n        return this.http.get<any>(environment.baseUrl2 + '/article-group/disable/' + id);\r\n      }\r\n    \r\n      /**\r\n       * get object by id\r\n       * @param id \r\n       */\r\n      findById(id: number): Observable<any> {\r\n        return this.http.get<any>(environment.baseUrl2 + '/article-group/detail/' + id);\r\n      }\r\n    \r\n      /**\r\n       * get a list of object\r\n       */\r\n      getIdAndName(): Observable<any> {\r\n          return this.http.get<any>(environment.baseUrl2 + '/article-group/active_groups_name');\r\n        }\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nexport function ValidateInt(control: AbstractControl) {\r\n        let value = control.value;\r\n        \r\n        if( Number(value) % 1 !== 0) {\r\n            return { 'invalid type number': true };\r\n         }\r\n         \r\n        return null;\r\n}"],"sourceRoot":"webpack:///"}